@startuml

interface Function {
    + accept(Visitor)
}

interface Visitor {
    + visit(Division)
    + visit(Modulus)
    + visit(Multiplication)
    + visit(Negation)
    + visit(Power)
    + visit(SquareRoot)
    + visit(Subtraction)
    + visit(Sum)
    + visit(Value)
    + visit(Variable)
}

Function -> Visitor

class ComputationVisitor implements Visitor {
    + compute(Function)
}

class Division implements Function {
    dividend: Function
    divisor: Function
}

class Modulus implements Function {
    value: Function
}

class Multiplication implements Function {
    firstFactor: Function
    secondFactor: Function
}

class Negation implements Function {
    value: Function
}

class Power implements Function {
    base: Function
    exponent: Function
}

class PrinterVisitor implements Visitor {
    + print(Function)
}

class SquareRoot implements Function {
    radicand: Function
}
class Subtraction implements Function {
    minuend: Function
    subtrahend: Function
}
class Sum implements Function {
    firstAddend: Function
    secondAddend: Function
}

class Value implements Function {
    value: double
}

class Variable implements Function {
    identifier: string
}

class VariableGetterVisitor implements Visitor {
    + getVariables(Function)
}

@enduml